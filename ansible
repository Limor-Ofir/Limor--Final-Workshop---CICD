playbook 1: create-infra.yaml
---
- name: Create AWS infrastructure
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Launch EC2 instances
      amazon.aws.ec2_instance:
        name: "limor_instance_{{ item }}"
        key_name: Limor-Logs
        instance_type: t2.micro
        image_id: ami-0a0e5d9c7acc336f1
        state: present
        region: us-east-1
        count: 1
        tags:
          Name: "limor_instance_{{ item }}"
          Environment: production
        security_groups:
          - default
        assign_public_ip: yes
        wait: yes
        aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
      loop: "{{ range(1, 4) }}"


playbook 2:setup-web-server.yaml
---
- name: Setup web server
  hosts: app
  user: centos
  become: true
  gather_facts: true
  tasks:
    - name: Install epel-release package
      yum:
        name: epel-release
        state: present
    - name: Install necessary packages
      yum:
        name:
          - git
          - python3-pip
          - yum-utils
        state: present
    - name: Add Docker CE repo
      shell: yum-config-manager --add-repo
        https://download.docker.com/linux/centos/docker-ce.repo
    - name: Install Docker packages
      yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose
        state: present
    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: true
    - name: Pull Docker image from DockerHub
      docker_image:
        name: ofirlimor/udi-center-app
        source: pull
    - name: Run Docker container
      docker_container:
        name: udi-center-container
        image: ofirlimor/udi-center-app
        state: started
        ports:
          - 80:80



playbook 3: destroy-infra.yaml

- name: Destroy AWS infrastructure
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Retrieve running EC2 instances
      amazon.aws.ec2_instance_facts:
        region: us-east-1
        aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
      register: ec2_facts

    - name: Terminate EC2 instances
      amazon.aws.ec2_instance:
        state: absent
        region: us-east-1
        aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        instance_ids: "{{ ec2_facts.instances | json_query('Instances[?State.Name==`running`].InstanceId') }}"
      when: ec2_facts.instances | json_query('Instances[?State.Name==`running`].InstanceId') | length > 0

    - name: Output termination result
      debug:
        msg: "Terminated instances: {{ ec2_facts.instances | json_query('Instances[?State.Name==`running`].InstanceId') }}"
      when: ec2_facts.instances | json_query('Instances[?State.Name==`running`].InstanceId') | length > 0

